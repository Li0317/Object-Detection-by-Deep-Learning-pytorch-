import torch
from torch import nn
class VGG(nn.Module):
    def __init__(self , num_classes = 100):
        super(VGG, self).__init__()
        self.layer1 = nn.Conv2d(3 , 64 , 3 , 1 , 1)
        self.layer2 = nn.Conv2d(64 , 64 , 3 , 1 , 1)
        self.layer3 = nn.MaxPool2d(2 , 2)
        self.layer4 = nn.Conv2d(64 , 128 , 3 , 1 , 1)
        self.layer5 = nn.Conv2d(128 , 128, 3, 1, 1)
        self.layer6 = nn.MaxPool2d(2, 2)
        self.layer7 = nn.Conv2d(128, 256, 3, 1, 1)
        self.layer8 = nn.Conv2d(256, 256, 3, 1, 1)
        self.layer9 = nn.Conv2d(256, 256, 3, 1, 1)
        self.layer10 = nn.MaxPool2d(2, 2)
        self.layer11 = nn.Conv2d(256, 512, 3, 1, 1)
        self.layer12 = nn.Conv2d(512, 512, 3, 1, 1)
        self.layer13 = nn.Conv2d(512, 512, 3, 1, 1)
        self.layer14 = nn.MaxPool2d(2, 2)
        self.layer15 = nn.Conv2d(512, 512, 3, 1, 1)
        self.layer16 = nn.Conv2d(512, 512, 3, 1, 1)
        self.layer17 = nn.Conv2d(512, 512, 3, 1, 1)
        self.layer18 = nn.MaxPool2d(2, 2)
        self.layer19 = nn.Linear(512 * 7 * 7 , 4096)
        self.layer20 = nn.Linear(4096, 4096)
        self.layer21 = nn.Linear(4096, num_classes)
        self.softmax = nn.Softmax(dim=1)

    def forward(self , x):
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        x = self.layer5(x)
        x = self.layer6(x)
        x = self.layer7(x)
        x = self.layer8(x)
        x = self.layer9(x)
        x = self.layer10(x)
        x = self.layer11(x)
        x = self.layer12(x)
        x = self.layer13(x)
        x = self.layer14(x)
        x = self.layer15(x)
        x = self.layer16(x)
        x = self.layer17(x)
        x = self.layer18(x)
        x = x.view(x.size(0) , -1)
        x = self.layer19(x)
        x = self.layer20(x)
        x = self.layer21(x)
        x = self.softmax(x)
        return x

VGG = VGG()
input = torch.randn(1 , 3 , 224 , 224)
scores = VGG(input)
